;;; Code for the form named :image-manager-ui of class dialog.
;;; The inspector may add event-handler starter code here,
;;; and you may add other code for this form as well.
;;; The code for recreating the window is auto-generated into 
;;; the *.bil file having the same name as this *.cl file.

(in-package :common-graphics-user)
(defgeneric handle-selected-outline-item (dialog widget item) (:documentation "handle the selected item"))
(defmethod handle-selected-outline-item(dialog widget (item imagetable-outline-item))
  (declare (ignorable dialog widget))
  #+debug (format t "~a ~a ~%" item "imagetable-outline-item") 
  )
(defvar *curr-selected-image* nil)
(defun remove-dup-path-sep (str)
  (let ((pos (search "\\\\" str))
        (len (length str))
        )
    (concatenate 'string (subseq str 0 pos) (subseq str (+ pos 1)))
    )
  )
(defmethod handle-selected-outline-item(dialog widget (item imageitem-outline-item))
  (declare (ignorable dialog widget))
  #+debug (format t "~a ~%" "imageitem-outline-item")
  (let* ((parent-id-list (get-parent-id-list item))
        (id-list (reverse (cons (value item) parent-id-list)))
        (imageitem (uie:get-image-item id-list))
        (path-name-window (find-window :PATH dialog))
	(image-path (string-trim '(#\Space #\Tab #\Newline) (uie:imageitem-image-file-path imageitem)))
	(project-path (uie:get-project-path (uie:get-curr-project)))
	(project-name (uie:get-project-name (uie:get-curr-project)))
	(full-path (uie:concatenate-string-with-path-sep project-path project-name (uie:image-component-name) image-path))
        )
    #+debug (format t "parent list : ~a ~a~%" id-list full-path)
    (setf *curr-selected-image* (remove-dup-path-sep (uie:path-sep-change full-path)))
    (format t "curr select image ~a ~%" *curr-selected-image*)
    (setf (value (dialog-item path-name-window)) *curr-selected-image*)
    )
  )
(defmethod handle-selected-outline-item(dialog widget (item image-outline-item))
  (declare (ignorable dialog widget))
  #+debug (format t "~a ~a ~%" item "image-outline-item")
  (let* ((parent-id-list (get-parent-id-list item))
	 (id-list (reverse (cons (value item) parent-id-list)))
	 (image (uie:get-image id-list))
	 (imageitem (uie:get-image-item id-list))
	 (image-path (string-trim '(#\Space #\Tab #\Newline) (uie:imageitem-image-file-path imageitem)))
	 (project-path (uie:get-project-path (uie:get-curr-project)))
	 (project-name (uie:get-project-name (uie:get-curr-project)))
	 (full-path (uie:concatenate-string-with-path-sep project-path project-name (uie:image-component-name) image-path))
	 (path-name-window (find-window :PATH dialog))
	 (x-window (find-window :image-x dialog))
	 (y-window (find-window :image-y dialog))
	 (width-window (find-window :image-width dialog))
	 (height-window (find-window :image-height dialog))
	 (mirror-window (find-window :image-mirror dialog))
         )
    (setf *curr-selected-image* (remove-dup-path-sep (uie:path-sep-change full-path)))
     (format t "curr select image ~a ~%" *curr-selected-image*)
    (setf (value (dialog-item path-name-window)) *curr-selected-image*)
    (setf (value (dialog-item x-window)) (uie:image-x image))
    (setf (value (dialog-item y-window)) (uie:image-y image))
    (setf (value (dialog-item width-window)) (uie:image-width image))
    (setf (value (dialog-item height-window)) (uie:image-height image))
    (setf (value (dialog-item mirror-window)) (uie:image-mirror image))
    )
  )
(defun get-parent-id-list (item)
  (if (parent item) (cons (value (parent item)) (get-parent-id-list (parent item))))
  )
(defun image-manager-ui-image-table-on-click (dialog widget)
  (declare (ignorable dialog widget))
  ;; NOTE:  Usually it is better to use an on-change function rather
  ;; than an on-click function.  See the doc pages for those properties.
  (handle-selected-outline-item dialog widget (selected-outline-item widget))
  t)
(defun send-to-browser ()
  (if *curr-selected-image*
  (let ((s (socket:with-pending-connect
               (sys:with-timeout (10 (error "connect failed"))
                  (socket:make-socket
                   :remote-host "127.0.0.1" :remote-port 5999 :type :stream :address-family :internet)))))
    (print s)
    (let* ((path-len (length *curr-selected-image*))
          (data (make-array (+ 3 path-len) :element-type '(unsigned-byte 8) :initial-element 0))
          (len (HostToNetShort (+ 3 path-len)))
           )
      (format t "len = ~a~%" path-len)
      (format t "data = ~a ~%" *curr-selected-image*)
      (setf (aref data 0) 0)
      (setf (aref data 1) (ldb (byte 8 0) len))
      (setf (aref data 2) (ldb (byte 8 8) len))
      (do ((i 3 (1+ i)) (j 0 (1+ j))) ((or (= j path-len) (> j path-len))) (setf (aref data i) (char-code (aref *curr-selected-image* j))))
      (write-sequence data s)
      (close s)
      )
    )
    )
  )

(defun image-manager-ui-image-preview-on-click (dialog widget)
  (declare (ignorable dialog widget))
  ;; NOTE:  Usually it is better to use an on-change function rather
  ;; than an on-click function.  See the doc pages for those properties.
  (send-to-browser)
  t)
