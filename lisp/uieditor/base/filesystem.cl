(in-package :uie)
#+mswindows (defconstant +path-sep-str+ "\\")
#+mswindows (defconstant +path-sep-char+ #\\)
#-mswindows (defconstant +path-sep-str+ "/")
#-mswindows (defconstant +path-sep-char+ #\/)
(defun dir-path-str-precondition (str)
  (when (null str) (error "string is nil"))
  )
(defun directory-exist-p (directory-path-string)
  (dir-path-str-precondition directory-path-string)
  (probe-file (directory-end-with-path-sep directory-path-string))
  )
(defun file-exist-p (file-path-string)
  (probe-file file-path-string)
  )
(defun end-with-path-sep? (str)
  (char= +path-sep-char+ (aref str (- (length str) 1)))
  )
(defun directory-end-with-path-sep (directory-path-string)
  "
    directory-path-string is not nil
  "
  (dir-path-str-precondition directory-path-string)
  (let ((end-of-path-sep-char-p (end-with-path-sep? directory-path-string)))
      (if end-of-path-sep-char-p directory-path-string (concatenate 'string directory-path-string +path-sep-str+))
    )
  )
(defun get-file-length (file-path-string)
  "
    file-path-name is namestring
  "
  (dir-path-str-precondition file-path-string)
  (file-length file-path-string)
  )
;;return the list string of directory
;;directory-path is namestring
(defun get-directory-children-string (directory-path-string)
  (dir-path-str-precondition directory-path-string)
  (let ((directory (get-directory-children directory-path-string)))
    (mapcar #'(lambda (d) (namestring d)) directory)
    )
  )
(defun get-directory-children (directory-path-string)
  (dir-path-str-precondition directory-path-string)
  (directory (make-pathname :name :wild :type #-clisp :wild #+clisp nil :defaults
				  (directory-end-with-path-sep directory-path-string)))
  )
(defun create-directory (directory-path-string)
  (dir-path-str-precondition directory-path-string)
  (multiple-value-bind (return-path ok) (ensure-directories-exist (directory-end-with-path-sep directory-path-string)) ok)
  )
(defun last-string-with-path-sep (str)
  (let ((pos (position +path-sep-char+ str :test #'char=)))
    (subseq str (+ pos 1))
    )
  )
(defun concatenate-string-with-path-sep (&rest stringlist)
  (let* ((strlist-path-char-end (mapcar #'(lambda (str) (if (end-with-path-sep? str) (progn #+debug (format t "cs  ~a~%" str) str) 
                                                      (progn #+debug (format t "kk ~a ~%" str) (concatenate 'string str +path-sep-str+)))) stringlist))
         (reduced-str (reduce #'(lambda (a b) (concatenate 'string a b)) strlist-path-char-end)))
      (remove +path-sep-char+ reduced-str :from-end t :count 1 :test #'char=)
    )
  )
(defun contain-name-in-directory? (name-string directory-path-string)
  (let* ((children (get-directory-children-string directory-path-string))
	 (name-list (mapcar #'(lambda (p) (last-string-with-path-sep (namestring p))) children)))
    (find name-string name-list :test #'string=)
    )
  )