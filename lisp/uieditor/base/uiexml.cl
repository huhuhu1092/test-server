(in-package :uie)
(defun parse-xml (xml-filename)
  (with-open-file
   (in xml-filename)
   (net.xml.parser:parse-xml in)
   )
  )
(defstruct imagetable id imageitems)
(defstruct imageitem id image-file-path mirror images)
(defstruct image id x y width height mirror)

(defun parse-image-table (lxml)
  (let ((element-start (car lxml)))
    (cond ((consp element-start) (
  )
(defun read-char-sequence (file-name)
  (with-open-file (in file-name :element-type '(unsigned-byte 8) :if-does-not-exist nil)
    (if (null in) nil
      (let* ((file-length (file-length in))
	     (content (make-array file-length)))
	(read-sequence content in)
	(let ((data (make-array file-length)))
	  (dotimes (i file-length) (setf (aref data i) (code-char (aref content i))))
	  data
	  )
	)
      )
    )
  )
(defvar *current-level* 0)
(defvar *in-comment* 0)
(defstruct element token level state)
(defstruct char-sequence content curr-index)
(defun is-end? (char-seq)
  (= (char-sequence-curr-index (length (char-sequence-content char-seq))))
  )
(defun read-char (char-seq)
  (if (is-end? char-seq) nil
    (let ((ret (aref (char-sequence-content char-seq) (char-sequence-curr-index char-seq))))
      (incf (char-sequence-curr-index char-seq) 1)
      ret
      )
    )
  )
(defun whitespace-char? (c)
  (or (eql c nil) (char= c #\Space) (char= c #\Tab) (char= c #\Newline) (char= c #\Return))
  )
(defun get-token (char-seq)
  (while (whitespace-char? (read-char char-seq)) nil)
  (let ((start (- (char-sequence-curr-index char-seq) 1)))
    (while (not (whitespace-char? (read-char char-seq))))
    (let ((end (- (char-sequence-curr-index char-seq) 1)))
      (if (is-end? char-seq)
	  (subseq char-seq start (+ end 1))
	  (subseq char-seq start end))
      )
    )
  )
(defvar *xml-list* nil)
(defun create-xml-list (char-seq)
  (loop (when (is-end? char-seq) (return-from create-xml-list *xml-list*))
    (let ((curr-token (get-token char-seq)))
      (cond ((or (string= curr-token "<!--") (string= curr-token "<?")) (setf *in-comment* 1))
	    ((or (string= curr-token "-->") (string= curr-token "?>")) (setf *in-comment* 0))
	    ((string= curr-token "<") (let
	
	)
      )
    )
  )

