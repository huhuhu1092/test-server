(in-package :uie)
(defmacro deftest (before assert after)
  "
    form : (deftest (before-form*) (assert-form*) (after-form*)
  "
;;  `(progn ,@before ,@(mapcar #'(lambda (a) `(progn `(format t "test ~a~%" ,a) `(assert ,a))) assert) ,@after)
  `(progn ,@before ,@(mapcar #'(lambda (a) (list 'progn  `(format t "test : ~a~%" ',a) `(assert ,a) )) assert) ,@after)

  )
(format t "unit test start~%")
(deftest ((clear-all-project)) nil nil)
(deftest ((setf a (list-project-path))) ((eql a nil)) nil)
(deftest ((setf b (list-project-name))) ((eql b nil)) nil)
(deftest nil ((equal (project-num) 0)) nil)
(deftest ((add-project "aa" "C:\\ppp")
	  (setf a (list-project-path))
	  (setf b (list-project-name))
	  )
  (
   (string= (car a) "C:\\ppp")
   (string= (car b) "aa")
   (equal (project-num) 1)
   )
  ((clear-all-project)))
(deftest ((clear-all-project)
	  (add-project "aa" "C:\\aa")
	  (add-project "bb" "c:\\bb")
	  (setf a (list-project-name))
	  (setf b (list-project-path))
	  (setf aa-component (component-value-and-comment "aa"))
	  (print aa-component)
	  (setf bb-component (component-value-and-comment "bb"))
	  (print bb-component)
	  (setf aa-component-name (mapcar #'(lambda (c) (car c)) aa-component))
	  (print aa-component-name)
	  (setf bb-component-name (mapcar #'(lambda (c) (car c)) bb-component))
	  (print bb-component-name)
	  )
  ((= (project-num) 2)
   (string= (car a) "aa")
   (string= (cadr a) "bb")
   (string= (car b) "C:\\aa")
   (string= (cadr b) "c:\\bb")
   (equal aa-component-name bb-component-name)
   )
  nil
  )

(format t "unit test end~%")