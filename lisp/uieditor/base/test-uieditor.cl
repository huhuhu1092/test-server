(in-package :uie)

(format t "unit test start~%")
(deftest ((delete-all-project)) ((= (project-num) 0)) nil)
(deftest ((setf a (get-all-project-path))) ((eql a nil)) nil)
(deftest ((setf b (get-all-project-name))) ((eql b nil)) nil)
(deftest ((add-project "aa" "C:\\ppp")
	  (setf a (find-project "aa" "C:\\ppp"))
	  )
  (
   (= (project-num) 1)
   (string= (get-project-path a) "C:\\ppp")
   (string= (get-project-name a) "aa")
   (equal (project-num) 1)
   )
  ((delete-all-project)))
(deftest ((delete-all-project)
	  (add-project "aa" "C:\\aa")
	  (add-project "bb" "c:\\bb")
	  (setf a (find-project "aa" "C:\\aa"))
	  (setf b (find-project "bb" "c:\\bb"))
	  (setf aa-component (component-value-and-comment a))
	  (print aa-component)
	  (setf bb-component (component-value-and-comment b))
	  (print bb-component)
	  (setf aa-component-name (mapcar #'(lambda (c) (car c)) aa-component))
	  (print aa-component-name)
	  (setf bb-component-name (mapcar #'(lambda (c) (car c)) bb-component))
	  (print bb-component-name)
	  )
  ((= (project-num) 2)
   (string= (get-project-name a) "aa")
   (string= (get-project-name b) "bb")
   (string= (get-project-path a) "C:\\aa")
   (string= (get-project-path b) "c:\\bb")
   (equal aa-component-name bb-component-name)
   )
  nil
  )
(deftest  ((delete-all-project)
	   (add-project "aa" "kk")
	   (add-project "aa" "cc")
	   (add-project "aa" "bb")
	   (add-project "xx" "bb")
	   (setf p1 (find-project "aa" "kk"))
	   (setf p2 (find-project "aa" "cc"))
	   (setf p3 (find-project "aa" "bb"))
	   (setf p4 (find-project "xx" "bb"))
	   (setf p5 (find-project "aa" "xx"))
	   (setf a (find-project-by-name "aa"))
	   (setf b (find-project-by-path "bb"))
	   (setf c (get-project-path-with-name "aa"))
	   (format t "c = ~a ~%" c)
	   (setf d (get-project-name-with-path "cc"))
	   (setf e (get-project-name-with-path "bb"))
	   (setf f (get-all-project-name))
	   (setf g (get-all-project-path))
	   (setf h (get-project-name p1))
	   (setf i (get-project-name p2))
	   (setf j (get-project-name p3))
	   (setf k (get-project-name p4))
	   (setf m (get-project-path p1))
	   (setf n (get-project-path p2))
	   (setf o (get-project-path p3))
	   (setf p (get-project-path p4))
	   )
  ((not (null p1)) (not (null p2)) (not (null p3)) (not (null p4)) (null p5) (= (project-num) 4)
   (equal (set-difference (list "kk" "cc" "bb") c :test #'equal) nil) (equal (list "aa") d) (equal (set-difference (list "aa" "xx") e :test #'equal) nil)
   (equal (set-difference (list "aa" "xx") f :test #'equal) nil) (equal (set-difference (list "kk" "cc" "bb") g :test #'equal) nil) (equal h "aa")
   (equal i "aa") (equal j "aa") (equal k "xx") (equal m "kk") (equal n "cc")
   (equal o "bb") (equal p "bb"))
  ((delete-all-project))
  )
(format t "unit test end~%")