(defun make-queue ()
  (cons nil nil)
  )
(defun empty-queue? (q)
  (null (front-ptr q))
  )
(defun front-ptr (q)
  (car q)
  )
(defun rear-ptr (q)
  (cdr q)
  )
(defun set-front-ptr! (q item)
  (setf (car q) item)
  )
(defun set-rear-ptr! (q item)
  (setf (cdr q) item)
  )
(defun front-queue (q)
  (if (empty-queue? q)
    (error "FRONT called with an empty queue")
    (car (front-ptr q))
    )
  )
(defun insert-queue! (q item)
  (let ((new-pair (cons item nil)))
    (if (empty-queue? q)
        (progn (set-front-ptr! q new-pair) (set-rear-ptr! q new-pair) q)
        (progn (setf (cdr (rear-ptr q)) new-pair) (set-rear-ptr! q new-pair) q) 
      )
    )
  )
(defun delete-queue! (q)
  (if (empty-queue? q)
    (error "DELETE called with an empty queue")
    (set-front-ptr! q (cdr (front-ptr q)))
    )
  )
