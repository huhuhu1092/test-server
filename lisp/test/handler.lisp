(defun read-txt (filename)
  (with-open-file (in filename :direction :input :element-type '(unsigned-byte 8))
		  (let ((filelen (file-length filename)))
		    (if (> filelen 0)
			(let ((sequence (make-array filelen :initial-element nil)))
			  (read-sequence sequence in)
		          sequence
			  )
		      nil
		      )
		    )
		  )
  )
(setf kk (read-txt "c:\\test"))
(define-condition malformed-log-entry-error (error)
  ((text :initarg :text :reader text)))
(defun well-formed-log-entry-p (text)
  (if (or (equal text "") (equal text "aa")) nil t)
  )

(defclass log-entry () ((text :initarg :text :initform nil :reader log-entry-text)
			(time :initarg :time :initform 0 :reader log-entry-time)
			)
  )
(defclass malformed-log-entry (log-entry) ())
(defun parse-log-entry (text)
  (if (well-formed-log-entry-p text)
      (make-instance 'log-entry :text text)
    (restart-case (error 'malformed-log-entry-error :text text) 
      (use-value (value) value)
      (reparse-value (fixed-text) (parse-log-entry fixed-text))
      (skip-log-entry () (progn (format t "error~%") nil))
      )))
(defun parse-log-entry (text)
    (if (well-formed-log-entry-p text)
        (make-instance 'log-entry :text text)
        (error 'malformed-log-entry-error :text text)))
(defun parse-log-file (file ak)
  (with-open-file (in file :direction :input)
		  (loop for text = (read-line in nil nil) while text
			for entry = (parse-log-entry text)
			when entry collect it)))
(defun skip-log-entry (c)
  (let ((restart (find-restart 'skip-log-entry)))
    (format t "~a~%" restart)
        (if restart (invoke-restart restart) nil)
  ))
(setf *cc* 0)
(setf aa (handler-bind ((malformed-log-entry-error (if (= *cc* 0) #'skip-log-entry 
                                            #'(lambda (c) (use-value (progn (format t "~a~%" c) (make-instance 'malformed-log-entry :text "kk")))))))
	      (parse-log-file "c:\\ttmp\\log.txt" "ll")))
(mapcar #'(lambda (c) (format t "~a~%" (log-entry-text c))) aa)