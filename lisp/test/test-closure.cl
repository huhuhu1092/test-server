(defun beside (painer)
  )
(defun below (painter)
  )
(defun flip-vert (painter)
  )
(defun flipped-pairs (painter)
  (let ((painter2 (beside painter (flip-vert painter))))
    (below painter2 painter2)
    )
  )
(defun right-split (painter n)
  (if (= n 0)
      painter
    (let ((smaller (right-split painter (- n 1))))
      (beside painter (below smaller smaller))))
  )
(defun up-split (painter n)
  (if (= n 0)
      painter
    (let ((smaller (up-split painter (- n 1))))
      (below painter (beside smaller smaller))
      )
    )
  )
(defun corner-split (painter n)
  (if (= n 0)
      painter
    (let ((up (up-split painter (- n 1)))
	  (right (right-split painter (- n 1))))
      (let ((top-left (beside up up))
	    (bottom-right (below right right))
	    (corner (corner-split painter (- n 1)))
	    )
	(beside (below painter top-left)
		(below bottom-right corner)))))
  )
(defun square-of-four (tl tr bl br)
  (lambda (painter)
    (let ((top (beside (tl painter) (tr painter)))
	  (bottom (beside (bl painter) (br painter))))
      (below bottom top)
      )
    )
  )
(defstruct frame origin edge1 edge2)
(defstruct vector2f x y)
(defun add-vect (v1 v2)
  (make-vector2f :x (+ (vector2f-x v1) (vector2f-x v2)) :y (+ (vector2f-y v1) (vector2f-y v2)))
  )
(defun scale-vect (s v)
  (make-vector2f :x (* s (vector2f-x v)) :y (* s (vector2f-y v))) 
  )
(defun frame-coord-map (frame)
  (lambda (v)
    (add-vect (frame-origin frame) (add-vect (scale-vect (vector2f-x v) (frame-edge1 frame)) (scale-vect (vector2f-y v) (frame-edge2 frame)))))
  )